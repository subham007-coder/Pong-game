Since you’re working on your phone, you’ll need an online IDE like Replit or Glitch to write and test your JavaScript and Socket.io code. Here’s how to get started:

1. Set Up Your Project

	•	Go to Replit or Glitch on your phone.
	•	Create a new Node.js project.
	•	Install express and socket.io by running:

npm install express socket.io



2. Server-Side Code (Node.js with Socket.io)

Create a file server.js and paste this code:

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static('public')); // Serve frontend files

let players = {};

io.on('connection', (socket) => {
    console.log('A player connected:', socket.id);

    if (Object.keys(players).length < 2) {
        players[socket.id] = { y: 200 }; // Initial paddle position
        socket.emit('playerNumber', Object.keys(players).length);
    } else {
        socket.emit('roomFull');
    }

    socket.on('updatePaddle', (data) => {
        players[socket.id].y = data.y;
        socket.broadcast.emit('updatePaddle', { id: socket.id, y: data.y });
    });

    socket.on('disconnect', () => {
        delete players[socket.id];
        io.emit('playerLeft', socket.id);
    });
});

server.listen(3000, () => console.log('Server running on port 3000'));

3. Client-Side Code (HTML + JavaScript)

Inside a folder named public, create an index.html file:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Multiplayer</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    <script>
        const socket = io();
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        let playerNumber = null;
        let paddles = { 1: { y: 200 }, 2: { y: 200 } };

        socket.on('playerNumber', (num) => {
            playerNumber = num;
        });

        socket.on('updatePaddle', (data) => {
            paddles[data.id] = { y: data.y };
        });

        socket.on('playerLeft', (id) => {
            paddles[id] = { y: 200 };
        });

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "white";
            ctx.fillRect(20, paddles[1]?.y || 200, 10, 60);
            ctx.fillRect(770, paddles[2]?.y || 200, 10, 60);
        }

        canvas.addEventListener('mousemove', (event) => {
            if (playerNumber) {
                paddles[playerNumber].y = event.clientY - 30;
                socket.emit('updatePaddle', { y: paddles[playerNumber].y });
            }
        });

        function gameLoop() {
            draw();
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>

4. Run the Game

	•	On Replit, click Run to start the server.
	•	Open the generated link on two devices to test multiplayer.

This is a basic Pong multiplayer setup. Let me know if you need ball physics or scoring!